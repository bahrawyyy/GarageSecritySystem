
Garage_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000131a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  0000131a  000013ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800126  00800126  00001474  2**0
                  ALLOC
  3 .stab         00002ac0  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e40  00000000  00000000  00003f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_1>
       8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_2>
       c:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <main>
      8a:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_Init>:

static void (*Timer0_OVF_Fptr)(void) = NULLPTR;

void Timer0_Init(Timer0Mode_type Mode, Timer0_Prescalar Prescalar,OC0Mode_type Oc0_Mode)
{
	switch(Mode)
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	81 f0       	breq	.+32     	; 0xb6 <Timer0_Init+0x24>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	28 f0       	brcs	.+10     	; 0xa4 <Timer0_Init+0x12>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	a9 f0       	breq	.+42     	; 0xc8 <Timer0_Init+0x36>
      9e:	83 30       	cpi	r24, 0x03	; 3
      a0:	21 f5       	brne	.+72     	; 0xea <Timer0_Init+0x58>
      a2:	1b c0       	rjmp	.+54     	; 0xda <Timer0_Init+0x48>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
      a4:	e3 e5       	ldi	r30, 0x53	; 83
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8f 7b       	andi	r24, 0xBF	; 191
      ac:	80 83       	st	Z, r24
		CLR_BIT(TCCR0,WGM01);
      ae:	80 81       	ld	r24, Z
      b0:	87 7f       	andi	r24, 0xF7	; 247
      b2:	80 83       	st	Z, r24
      b4:	1a c0       	rjmp	.+52     	; 0xea <Timer0_Init+0x58>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
      b6:	e3 e5       	ldi	r30, 0x53	; 83
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	80 64       	ori	r24, 0x40	; 64
      be:	80 83       	st	Z, r24
		CLR_BIT(TCCR0,WGM01);
      c0:	80 81       	ld	r24, Z
      c2:	87 7f       	andi	r24, 0xF7	; 247
      c4:	80 83       	st	Z, r24
      c6:	11 c0       	rjmp	.+34     	; 0xea <Timer0_Init+0x58>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
      c8:	e3 e5       	ldi	r30, 0x53	; 83
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	8f 7b       	andi	r24, 0xBF	; 191
      d0:	80 83       	st	Z, r24
		SET_BIT(TCCR0,WGM01);
      d2:	80 81       	ld	r24, Z
      d4:	88 60       	ori	r24, 0x08	; 8
      d6:	80 83       	st	Z, r24
      d8:	08 c0       	rjmp	.+16     	; 0xea <Timer0_Init+0x58>
		break;
	case TIMER0_FAST_PWM_MODE:
		SET_BIT(TCCR0,WGM00);
      da:	e3 e5       	ldi	r30, 0x53	; 83
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	80 83       	st	Z, r24
		SET_BIT(TCCR0,WGM01);
      e4:	80 81       	ld	r24, Z
      e6:	88 60       	ori	r24, 0x08	; 8
      e8:	80 83       	st	Z, r24
		break;
	}

	// To make sure the first three pins are zero
	// in case of old data written
	TCCR0 = TCCR0 & 0xf8;   // 11111000
      ea:	e3 e5       	ldi	r30, 0x53	; 83
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	88 7f       	andi	r24, 0xF8	; 248
      f2:	80 83       	st	Z, r24
	TCCR0 = TCCR0 | Prescalar;
      f4:	80 81       	ld	r24, Z
      f6:	86 2b       	or	r24, r22
      f8:	80 83       	st	Z, r24


	// Hardware pin from OCU (Output compare unit) to output something
	// when there is matching between OCR and TCNT

	switch(Oc0_Mode)
      fa:	41 30       	cpi	r20, 0x01	; 1
      fc:	81 f0       	breq	.+32     	; 0x11e <Timer0_Init+0x8c>
      fe:	41 30       	cpi	r20, 0x01	; 1
     100:	28 f0       	brcs	.+10     	; 0x10c <Timer0_Init+0x7a>
     102:	42 30       	cpi	r20, 0x02	; 2
     104:	a9 f0       	breq	.+42     	; 0x130 <Timer0_Init+0x9e>
     106:	43 30       	cpi	r20, 0x03	; 3
     108:	21 f5       	brne	.+72     	; 0x152 <Timer0_Init+0xc0>
     10a:	1b c0       	rjmp	.+54     	; 0x142 <Timer0_Init+0xb0>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
     10c:	e3 e5       	ldi	r30, 0x53	; 83
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	80 83       	st	Z, r24
		CLR_BIT(TCCR0,COM01);
     116:	80 81       	ld	r24, Z
     118:	8f 7d       	andi	r24, 0xDF	; 223
     11a:	80 83       	st	Z, r24
     11c:	08 95       	ret
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
     11e:	e3 e5       	ldi	r30, 0x53	; 83
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 61       	ori	r24, 0x10	; 16
     126:	80 83       	st	Z, r24
		CLR_BIT(TCCR0,COM01);
     128:	80 81       	ld	r24, Z
     12a:	8f 7d       	andi	r24, 0xDF	; 223
     12c:	80 83       	st	Z, r24
     12e:	08 95       	ret
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
     130:	e3 e5       	ldi	r30, 0x53	; 83
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8f 7e       	andi	r24, 0xEF	; 239
     138:	80 83       	st	Z, r24
		SET_BIT(TCCR0,COM01);
     13a:	80 81       	ld	r24, Z
     13c:	80 62       	ori	r24, 0x20	; 32
     13e:	80 83       	st	Z, r24
     140:	08 95       	ret
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
     142:	e3 e5       	ldi	r30, 0x53	; 83
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	80 61       	ori	r24, 0x10	; 16
     14a:	80 83       	st	Z, r24
		SET_BIT(TCCR0,COM01);
     14c:	80 81       	ld	r24, Z
     14e:	80 62       	ori	r24, 0x20	; 32
     150:	80 83       	st	Z, r24
     152:	08 95       	ret

00000154 <Timer0_OVInterrupt_Enable>:

// Separately, in case you want to run the timer
// without interrupt
void Timer0_OVInterrupt_Enable(void)
{
	SET_BIT(TIMSK,TOIE0);
     154:	e9 e5       	ldi	r30, 0x59	; 89
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	80 83       	st	Z, r24
}
     15e:	08 95       	ret

00000160 <Timer0_OVInterrupt_Disable>:
void Timer0_OVInterrupt_Disable(void)
{
	CLR_BIT(TIMSK,TOIE0);
     160:	e9 e5       	ldi	r30, 0x59	; 89
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8e 7f       	andi	r24, 0xFE	; 254
     168:	80 83       	st	Z, r24
}
     16a:	08 95       	ret

0000016c <Timer0_OVF_SetCallBack>:

void Timer0_OVF_SetCallBack(void (*Local_ptr_toFunc))
{
	Timer0_OVF_Fptr = Local_ptr_toFunc;
     16c:	90 93 27 01 	sts	0x0127, r25
     170:	80 93 26 01 	sts	0x0126, r24
}
     174:	08 95       	ret

00000176 <__vector_11>:


// used in delay
ISR(TIMER0_OVF_vect)
{
     176:	1f 92       	push	r1
     178:	0f 92       	push	r0
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	0f 92       	push	r0
     17e:	11 24       	eor	r1, r1
     180:	2f 93       	push	r18
     182:	3f 93       	push	r19
     184:	4f 93       	push	r20
     186:	5f 93       	push	r21
     188:	6f 93       	push	r22
     18a:	7f 93       	push	r23
     18c:	8f 93       	push	r24
     18e:	9f 93       	push	r25
     190:	af 93       	push	r26
     192:	bf 93       	push	r27
     194:	ef 93       	push	r30
     196:	ff 93       	push	r31
	if(Timer0_OVF_Fptr != NULLPTR)
     198:	e0 91 26 01 	lds	r30, 0x0126
     19c:	f0 91 27 01 	lds	r31, 0x0127
     1a0:	30 97       	sbiw	r30, 0x00	; 0
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     1a4:	09 95       	icall
	}
}
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	bf 91       	pop	r27
     1ac:	af 91       	pop	r26
     1ae:	9f 91       	pop	r25
     1b0:	8f 91       	pop	r24
     1b2:	7f 91       	pop	r23
     1b4:	6f 91       	pop	r22
     1b6:	5f 91       	pop	r21
     1b8:	4f 91       	pop	r20
     1ba:	3f 91       	pop	r19
     1bc:	2f 91       	pop	r18
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <EXI_Set_CallBack>:
/* The name of function without () is an address to that function */
/* The function he passes must take void and return void also */
/************************************************************************/

void EXI_Set_CallBack(EX_Interrupt_Source_type interrupt, void (*LocalPtr)(void)){
	switch(interrupt){
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	51 f0       	breq	.+20     	; 0x1e0 <EXI_Set_CallBack+0x18>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	18 f0       	brcs	.+6      	; 0x1d6 <EXI_Set_CallBack+0xe>
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	79 f4       	brne	.+30     	; 0x1f2 <EXI_Set_CallBack+0x2a>
     1d4:	0a c0       	rjmp	.+20     	; 0x1ea <EXI_Set_CallBack+0x22>
	case EX_INT0:
		INT0_Fptr = LocalPtr;
     1d6:	70 93 2d 01 	sts	0x012D, r23
     1da:	60 93 2c 01 	sts	0x012C, r22
     1de:	08 95       	ret
		break;
	case EX_INT1:
		INT1_Fptr = LocalPtr;
     1e0:	70 93 2b 01 	sts	0x012B, r23
     1e4:	60 93 2a 01 	sts	0x012A, r22
     1e8:	08 95       	ret
		break;
	case EX_INT2:
		INT2_Fptr = LocalPtr;
     1ea:	70 93 29 01 	sts	0x0129, r23
     1ee:	60 93 28 01 	sts	0x0128, r22
     1f2:	08 95       	ret

000001f4 <EXI_ENABLE>:
/*  Enabling and disabling the interrupt                                */
/************************************************************************/


void EXI_ENABLE(EX_Interrupt_Source_type interrupt){
	switch(interrupt){
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	59 f0       	breq	.+22     	; 0x20e <EXI_ENABLE+0x1a>
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	18 f0       	brcs	.+6      	; 0x202 <EXI_ENABLE+0xe>
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	91 f4       	brne	.+36     	; 0x224 <EXI_ENABLE+0x30>
     200:	0c c0       	rjmp	.+24     	; 0x21a <EXI_ENABLE+0x26>
	case EX_INT0:
		SET_BIT(GICR,INT0);
     202:	eb e5       	ldi	r30, 0x5B	; 91
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	80 64       	ori	r24, 0x40	; 64
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret
		break;
	case EX_INT1:
		SET_BIT(GICR,INT1);
     20e:	eb e5       	ldi	r30, 0x5B	; 91
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 68       	ori	r24, 0x80	; 128
     216:	80 83       	st	Z, r24
     218:	08 95       	ret
		break;
	case EX_INT2:
		SET_BIT(GICR,INT2);
     21a:	eb e5       	ldi	r30, 0x5B	; 91
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	80 62       	ori	r24, 0x20	; 32
     222:	80 83       	st	Z, r24
     224:	08 95       	ret

00000226 <EXI_DISABLE>:
	}
}


void EXI_DISABLE(EX_Interrupt_Source_type interrupt){
	switch(interrupt){
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	59 f0       	breq	.+22     	; 0x240 <EXI_DISABLE+0x1a>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	18 f0       	brcs	.+6      	; 0x234 <EXI_DISABLE+0xe>
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	91 f4       	brne	.+36     	; 0x256 <EXI_DISABLE+0x30>
     232:	0c c0       	rjmp	.+24     	; 0x24c <EXI_DISABLE+0x26>
	case EX_INT0:
		CLR_BIT(GICR,INT0);
     234:	eb e5       	ldi	r30, 0x5B	; 91
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8f 7b       	andi	r24, 0xBF	; 191
     23c:	80 83       	st	Z, r24
     23e:	08 95       	ret
		break;
	case EX_INT1:
		CLR_BIT(GICR,INT1);
     240:	eb e5       	ldi	r30, 0x5B	; 91
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 77       	andi	r24, 0x7F	; 127
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret
		break;
	case EX_INT2:
		CLR_BIT(GICR,INT2);
     24c:	eb e5       	ldi	r30, 0x5B	; 91
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	8f 7d       	andi	r24, 0xDF	; 223
     254:	80 83       	st	Z, r24
     256:	08 95       	ret

00000258 <EXI_TriggerEdge>:
		break;
	}
}

void EXI_TriggerEdge(EX_Interrupt_Source_type interrupt,Trigger_Edge_type edge){
	switch(interrupt){
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	a1 f1       	breq	.+104    	; 0x2c4 <EXI_TriggerEdge+0x6c>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	20 f0       	brcs	.+8      	; 0x268 <EXI_TriggerEdge+0x10>
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	09 f0       	breq	.+2      	; 0x266 <EXI_TriggerEdge+0xe>
     264:	72 c0       	rjmp	.+228    	; 0x34a <EXI_TriggerEdge+0xf2>
     266:	5b c0       	rjmp	.+182    	; 0x31e <EXI_TriggerEdge+0xc6>
	case EX_INT0:
		switch(edge){
     268:	61 30       	cpi	r22, 0x01	; 1
     26a:	89 f0       	breq	.+34     	; 0x28e <EXI_TriggerEdge+0x36>
     26c:	61 30       	cpi	r22, 0x01	; 1
     26e:	30 f0       	brcs	.+12     	; 0x27c <EXI_TriggerEdge+0x24>
     270:	62 30       	cpi	r22, 0x02	; 2
     272:	b1 f0       	breq	.+44     	; 0x2a0 <EXI_TriggerEdge+0x48>
     274:	63 30       	cpi	r22, 0x03	; 3
     276:	09 f0       	breq	.+2      	; 0x27a <EXI_TriggerEdge+0x22>
     278:	68 c0       	rjmp	.+208    	; 0x34a <EXI_TriggerEdge+0xf2>
     27a:	1b c0       	rjmp	.+54     	; 0x2b2 <EXI_TriggerEdge+0x5a>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     27c:	e5 e5       	ldi	r30, 0x55	; 85
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24
			CLR_BIT(MCUCR,ISC01);
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret
			break;
		case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
     28e:	e5 e5       	ldi	r30, 0x55	; 85
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
			CLR_BIT(MCUCR,ISC01);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
     29e:	08 95       	ret
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     2a0:	e5 e5       	ldi	r30, 0x55	; 85
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8e 7f       	andi	r24, 0xFE	; 254
     2a8:	80 83       	st	Z, r24
			SET_BIT(MCUCR,ISC01);
     2aa:	80 81       	ld	r24, Z
     2ac:	82 60       	ori	r24, 0x02	; 2
     2ae:	80 83       	st	Z, r24
     2b0:	08 95       	ret
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     2b2:	e5 e5       	ldi	r30, 0x55	; 85
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	81 60       	ori	r24, 0x01	; 1
     2ba:	80 83       	st	Z, r24
			SET_BIT(MCUCR,ISC01);
     2bc:	80 81       	ld	r24, Z
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 83       	st	Z, r24
     2c2:	08 95       	ret
			break;
		}
		break;
		case EX_INT1:
			switch(edge){
     2c4:	61 30       	cpi	r22, 0x01	; 1
     2c6:	81 f0       	breq	.+32     	; 0x2e8 <EXI_TriggerEdge+0x90>
     2c8:	61 30       	cpi	r22, 0x01	; 1
     2ca:	28 f0       	brcs	.+10     	; 0x2d6 <EXI_TriggerEdge+0x7e>
     2cc:	62 30       	cpi	r22, 0x02	; 2
     2ce:	a9 f0       	breq	.+42     	; 0x2fa <EXI_TriggerEdge+0xa2>
     2d0:	63 30       	cpi	r22, 0x03	; 3
     2d2:	d9 f5       	brne	.+118    	; 0x34a <EXI_TriggerEdge+0xf2>
     2d4:	1b c0       	rjmp	.+54     	; 0x30c <EXI_TriggerEdge+0xb4>
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC10);
     2d6:	e5 e5       	ldi	r30, 0x55	; 85
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8b 7f       	andi	r24, 0xFB	; 251
     2de:	80 83       	st	Z, r24
				CLR_BIT(MCUCR,ISC11);
     2e0:	80 81       	ld	r24, Z
     2e2:	87 7f       	andi	r24, 0xF7	; 247
     2e4:	80 83       	st	Z, r24
     2e6:	08 95       	ret
				break;
			case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC10);
     2e8:	e5 e5       	ldi	r30, 0x55	; 85
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	80 83       	st	Z, r24
				CLR_BIT(MCUCR,ISC11);
     2f2:	80 81       	ld	r24, Z
     2f4:	87 7f       	andi	r24, 0xF7	; 247
     2f6:	80 83       	st	Z, r24
     2f8:	08 95       	ret
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC10);
     2fa:	e5 e5       	ldi	r30, 0x55	; 85
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	8b 7f       	andi	r24, 0xFB	; 251
     302:	80 83       	st	Z, r24
				SET_BIT(MCUCR,ISC11);
     304:	80 81       	ld	r24, Z
     306:	88 60       	ori	r24, 0x08	; 8
     308:	80 83       	st	Z, r24
     30a:	08 95       	ret
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC10);
     30c:	e5 e5       	ldi	r30, 0x55	; 85
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	84 60       	ori	r24, 0x04	; 4
     314:	80 83       	st	Z, r24
				SET_BIT(MCUCR,ISC11);
     316:	80 81       	ld	r24, Z
     318:	88 60       	ori	r24, 0x08	; 8
     31a:	80 83       	st	Z, r24
     31c:	08 95       	ret
				break;
			}
			break;
			case EX_INT2:
				switch(edge){
     31e:	62 30       	cpi	r22, 0x02	; 2
     320:	19 f0       	breq	.+6      	; 0x328 <EXI_TriggerEdge+0xd0>
     322:	63 30       	cpi	r22, 0x03	; 3
     324:	69 f4       	brne	.+26     	; 0x340 <EXI_TriggerEdge+0xe8>
     326:	06 c0       	rjmp	.+12     	; 0x334 <EXI_TriggerEdge+0xdc>
				case FALLING_EDGE:
					CLR_BIT(MCUCSR,ISC2);
     328:	e4 e5       	ldi	r30, 0x54	; 84
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7b       	andi	r24, 0xBF	; 191
     330:	80 83       	st	Z, r24
     332:	08 95       	ret
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
     334:	e4 e5       	ldi	r30, 0x54	; 84
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	80 83       	st	Z, r24
     33e:	08 95       	ret
					break;
				default:   // Because we haven't handled all cases just cuz of data sheet
					CLR_BIT(MCUCSR,ISC2);
     340:	e4 e5       	ldi	r30, 0x54	; 84
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	8f 7b       	andi	r24, 0xBF	; 191
     348:	80 83       	st	Z, r24
     34a:	08 95       	ret

0000034c <__vector_1>:
/*                     ISR                                              */
/************************************************************************/

/* What if the user forgot to send a function to SetCallBack, We made an initialization with NULLPTR, So we can't call a NULLPTR, it will give undefined behavior  */

ISR(INT0_vect){
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	2f 93       	push	r18
     358:	3f 93       	push	r19
     35a:	4f 93       	push	r20
     35c:	5f 93       	push	r21
     35e:	6f 93       	push	r22
     360:	7f 93       	push	r23
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	af 93       	push	r26
     368:	bf 93       	push	r27
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
	if(INT0_Fptr != NULLPTR){
     36e:	e0 91 2c 01 	lds	r30, 0x012C
     372:	f0 91 2d 01 	lds	r31, 0x012D
     376:	30 97       	sbiw	r30, 0x00	; 0
     378:	09 f0       	breq	.+2      	; 0x37c <__vector_1+0x30>
		INT0_Fptr();
     37a:	09 95       	icall
	}
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_2>:

ISR(INT1_vect){
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
	if(INT1_Fptr != NULLPTR){
     3c0:	e0 91 2a 01 	lds	r30, 0x012A
     3c4:	f0 91 2b 01 	lds	r31, 0x012B
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_2+0x30>
		INT1_Fptr();
     3cc:	09 95       	icall
	}
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_3>:

ISR(INT2_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	if(INT2_Fptr != NULLPTR){
     412:	e0 91 28 01 	lds	r30, 0x0128
     416:	f0 91 29 01 	lds	r31, 0x0129
     41a:	30 97       	sbiw	r30, 0x00	; 0
     41c:	09 f0       	breq	.+2      	; 0x420 <__vector_3+0x30>
		INT2_Fptr();
     41e:	09 95       	icall
	}
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <DIO_ES_tSetPinDirection>:
 * ( INPUT or OUTPUT )
 */

ES_t DIO_ES_tSetPinDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Dir_Type copy_u8_PinDirection)
{
	if(copy_u8_PinId > PIN_LIMIT){
     442:	68 30       	cpi	r22, 0x08	; 8
     444:	08 f0       	brcs	.+2      	; 0x448 <DIO_ES_tSetPinDirection+0x6>
     446:	8e c0       	rjmp	.+284    	; 0x564 <DIO_ES_tSetPinDirection+0x122>
		return ES_NOT_OK;
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     448:	88 23       	and	r24, r24
     44a:	11 f5       	brne	.+68     	; 0x490 <DIO_ES_tSetPinDirection+0x4e>
		if(copy_u8_PinDirection == OUTPUT){
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	71 f4       	brne	.+28     	; 0x46c <DIO_ES_tSetPinDirection+0x2a>
			SET_BIT(DDRA,copy_u8_PinId);
     450:	ea e3       	ldi	r30, 0x3A	; 58
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	20 81       	ld	r18, Z
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_ES_tSetPinDirection+0x1e>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	6a 95       	dec	r22
     462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_ES_tSetPinDirection+0x1a>
     464:	28 2b       	or	r18, r24
     466:	20 83       	st	Z, r18
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 95       	ret
		}else if(copy_u8_PinDirection == INPUT){
     46c:	44 23       	and	r20, r20
     46e:	09 f0       	breq	.+2      	; 0x472 <DIO_ES_tSetPinDirection+0x30>
     470:	79 c0       	rjmp	.+242    	; 0x564 <DIO_ES_tSetPinDirection+0x122>
			CLR_BIT(DDRA,copy_u8_PinId);
     472:	ea e3       	ldi	r30, 0x3A	; 58
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	20 81       	ld	r18, Z
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_ES_tSetPinDirection+0x40>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	6a 95       	dec	r22
     484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_ES_tSetPinDirection+0x3c>
     486:	80 95       	com	r24
     488:	82 23       	and	r24, r18
     48a:	80 83       	st	Z, r24
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	11 f5       	brne	.+68     	; 0x4d8 <DIO_ES_tSetPinDirection+0x96>
		if(copy_u8_PinDirection == OUTPUT){
     494:	41 30       	cpi	r20, 0x01	; 1
     496:	71 f4       	brne	.+28     	; 0x4b4 <DIO_ES_tSetPinDirection+0x72>
			SET_BIT(DDRB,copy_u8_PinId);
     498:	e7 e3       	ldi	r30, 0x37	; 55
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	20 81       	ld	r18, Z
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_ES_tSetPinDirection+0x66>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	6a 95       	dec	r22
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_ES_tSetPinDirection+0x62>
     4ac:	28 2b       	or	r18, r24
     4ae:	20 83       	st	Z, r18
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
		}else if(copy_u8_PinDirection == INPUT){
     4b4:	44 23       	and	r20, r20
     4b6:	09 f0       	breq	.+2      	; 0x4ba <DIO_ES_tSetPinDirection+0x78>
     4b8:	55 c0       	rjmp	.+170    	; 0x564 <DIO_ES_tSetPinDirection+0x122>
			CLR_BIT(DDRB,copy_u8_PinId);
     4ba:	e7 e3       	ldi	r30, 0x37	; 55
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	20 81       	ld	r18, Z
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_ES_tSetPinDirection+0x88>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	6a 95       	dec	r22
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_ES_tSetPinDirection+0x84>
     4ce:	80 95       	com	r24
     4d0:	82 23       	and	r24, r18
     4d2:	80 83       	st	Z, r24
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	09 f5       	brne	.+66     	; 0x51e <DIO_ES_tSetPinDirection+0xdc>
		if(copy_u8_PinDirection == OUTPUT){
     4dc:	41 30       	cpi	r20, 0x01	; 1
     4de:	71 f4       	brne	.+28     	; 0x4fc <DIO_ES_tSetPinDirection+0xba>
			SET_BIT(DDRC,copy_u8_PinId);
     4e0:	e4 e3       	ldi	r30, 0x34	; 52
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	20 81       	ld	r18, Z
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_ES_tSetPinDirection+0xae>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_ES_tSetPinDirection+0xaa>
     4f4:	28 2b       	or	r18, r24
     4f6:	20 83       	st	Z, r18
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret
		}else if(copy_u8_PinDirection == INPUT){
     4fc:	44 23       	and	r20, r20
     4fe:	91 f5       	brne	.+100    	; 0x564 <DIO_ES_tSetPinDirection+0x122>
			CLR_BIT(DDRC,copy_u8_PinId);
     500:	e4 e3       	ldi	r30, 0x34	; 52
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	20 81       	ld	r18, Z
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_ES_tSetPinDirection+0xce>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	6a 95       	dec	r22
     512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_ES_tSetPinDirection+0xca>
     514:	80 95       	com	r24
     516:	82 23       	and	r24, r18
     518:	80 83       	st	Z, r24
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	09 f5       	brne	.+66     	; 0x564 <DIO_ES_tSetPinDirection+0x122>
		if(copy_u8_PinDirection == OUTPUT){
     522:	41 30       	cpi	r20, 0x01	; 1
     524:	71 f4       	brne	.+28     	; 0x542 <DIO_ES_tSetPinDirection+0x100>
			SET_BIT(DDRD,copy_u8_PinId);
     526:	e1 e3       	ldi	r30, 0x31	; 49
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	20 81       	ld	r18, Z
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_ES_tSetPinDirection+0xf4>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_ES_tSetPinDirection+0xf0>
     53a:	28 2b       	or	r18, r24
     53c:	20 83       	st	Z, r18
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
		}else if(copy_u8_PinDirection == INPUT){
     542:	44 23       	and	r20, r20
     544:	79 f4       	brne	.+30     	; 0x564 <DIO_ES_tSetPinDirection+0x122>
			CLR_BIT(DDRD,copy_u8_PinId);
     546:	e1 e3       	ldi	r30, 0x31	; 49
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	20 81       	ld	r18, Z
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_ES_tSetPinDirection+0x114>
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	6a 95       	dec	r22
     558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_ES_tSetPinDirection+0x110>
     55a:	80 95       	com	r24
     55c:	82 23       	and	r24, r18
     55e:	80 83       	st	Z, r24
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	08 95       	ret
     564:	81 e0       	ldi	r24, 0x01	; 1
		}
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
     566:	08 95       	ret

00000568 <DIO_ES_tSetPinValue>:
 * ( LOW or HIGH )
 */

ES_t DIO_ES_tSetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type copy_u8_PinValue)
{
	if(copy_u8_PinId > PIN_LIMIT){
     568:	68 30       	cpi	r22, 0x08	; 8
     56a:	08 f0       	brcs	.+2      	; 0x56e <DIO_ES_tSetPinValue+0x6>
     56c:	8e c0       	rjmp	.+284    	; 0x68a <DIO_ES_tSetPinValue+0x122>
		return ES_NOT_OK;
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     56e:	88 23       	and	r24, r24
     570:	11 f5       	brne	.+68     	; 0x5b6 <DIO_ES_tSetPinValue+0x4e>
		if(copy_u8_PinValue == HIGH){
     572:	41 30       	cpi	r20, 0x01	; 1
     574:	71 f4       	brne	.+28     	; 0x592 <DIO_ES_tSetPinValue+0x2a>
			SET_BIT(PORTA,copy_u8_PinId);
     576:	eb e3       	ldi	r30, 0x3B	; 59
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	20 81       	ld	r18, Z
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_ES_tSetPinValue+0x1e>
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_ES_tSetPinValue+0x1a>
     58a:	28 2b       	or	r18, r24
     58c:	20 83       	st	Z, r18
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	08 95       	ret
		}else if(copy_u8_PinValue == LOW){
     592:	44 23       	and	r20, r20
     594:	09 f0       	breq	.+2      	; 0x598 <DIO_ES_tSetPinValue+0x30>
     596:	79 c0       	rjmp	.+242    	; 0x68a <DIO_ES_tSetPinValue+0x122>
			CLR_BIT(PORTA,copy_u8_PinId);
     598:	eb e3       	ldi	r30, 0x3B	; 59
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	20 81       	ld	r18, Z
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_ES_tSetPinValue+0x40>
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	6a 95       	dec	r22
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_ES_tSetPinValue+0x3c>
     5ac:	80 95       	com	r24
     5ae:	82 23       	and	r24, r18
     5b0:	80 83       	st	Z, r24
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	11 f5       	brne	.+68     	; 0x5fe <DIO_ES_tSetPinValue+0x96>
		if(copy_u8_PinValue == HIGH){
     5ba:	41 30       	cpi	r20, 0x01	; 1
     5bc:	71 f4       	brne	.+28     	; 0x5da <DIO_ES_tSetPinValue+0x72>
			SET_BIT(PORTB,copy_u8_PinId);
     5be:	e8 e3       	ldi	r30, 0x38	; 56
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	20 81       	ld	r18, Z
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_ES_tSetPinValue+0x66>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	6a 95       	dec	r22
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_ES_tSetPinValue+0x62>
     5d2:	28 2b       	or	r18, r24
     5d4:	20 83       	st	Z, r18
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
		}else if(copy_u8_PinValue == LOW){
     5da:	44 23       	and	r20, r20
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <DIO_ES_tSetPinValue+0x78>
     5de:	55 c0       	rjmp	.+170    	; 0x68a <DIO_ES_tSetPinValue+0x122>
			CLR_BIT(PORTB,copy_u8_PinId);
     5e0:	e8 e3       	ldi	r30, 0x38	; 56
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	20 81       	ld	r18, Z
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_ES_tSetPinValue+0x88>
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	6a 95       	dec	r22
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_ES_tSetPinValue+0x84>
     5f4:	80 95       	com	r24
     5f6:	82 23       	and	r24, r18
     5f8:	80 83       	st	Z, r24
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	09 f5       	brne	.+66     	; 0x644 <DIO_ES_tSetPinValue+0xdc>
		if(copy_u8_PinValue == HIGH){
     602:	41 30       	cpi	r20, 0x01	; 1
     604:	71 f4       	brne	.+28     	; 0x622 <DIO_ES_tSetPinValue+0xba>
			SET_BIT(PORTC,copy_u8_PinId);
     606:	e5 e3       	ldi	r30, 0x35	; 53
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	20 81       	ld	r18, Z
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_ES_tSetPinValue+0xae>
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	6a 95       	dec	r22
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_ES_tSetPinValue+0xaa>
     61a:	28 2b       	or	r18, r24
     61c:	20 83       	st	Z, r18
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	08 95       	ret
		}else if(copy_u8_PinValue == LOW){
     622:	44 23       	and	r20, r20
     624:	91 f5       	brne	.+100    	; 0x68a <DIO_ES_tSetPinValue+0x122>
			CLR_BIT(PORTC,copy_u8_PinId);
     626:	e5 e3       	ldi	r30, 0x35	; 53
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	20 81       	ld	r18, Z
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_ES_tSetPinValue+0xce>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	6a 95       	dec	r22
     638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_ES_tSetPinValue+0xca>
     63a:	80 95       	com	r24
     63c:	82 23       	and	r24, r18
     63e:	80 83       	st	Z, r24
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	08 95       	ret
		}else{
			return ES_NOT_OK;
		}
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	09 f5       	brne	.+66     	; 0x68a <DIO_ES_tSetPinValue+0x122>
		if(copy_u8_PinValue == HIGH){
     648:	41 30       	cpi	r20, 0x01	; 1
     64a:	71 f4       	brne	.+28     	; 0x668 <DIO_ES_tSetPinValue+0x100>
			SET_BIT(PORTD,copy_u8_PinId);
     64c:	e2 e3       	ldi	r30, 0x32	; 50
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	20 81       	ld	r18, Z
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_ES_tSetPinValue+0xf4>
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	6a 95       	dec	r22
     65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_ES_tSetPinValue+0xf0>
     660:	28 2b       	or	r18, r24
     662:	20 83       	st	Z, r18
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
		}else if(copy_u8_PinValue == LOW){
     668:	44 23       	and	r20, r20
     66a:	79 f4       	brne	.+30     	; 0x68a <DIO_ES_tSetPinValue+0x122>
			CLR_BIT(PORTD,copy_u8_PinId);
     66c:	e2 e3       	ldi	r30, 0x32	; 50
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	20 81       	ld	r18, Z
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_ES_tSetPinValue+0x114>
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	6a 95       	dec	r22
     67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_ES_tSetPinValue+0x110>
     680:	80 95       	com	r24
     682:	82 23       	and	r24, r18
     684:	80 83       	st	Z, r24
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	08 95       	ret
     68a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
     68c:	08 95       	ret

0000068e <DIO_ES_tGetPinValue>:
 * ( LOW or HIGH )
 */


ES_t DIO_ES_tGetPinValue(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId, DIO_U8_Value_Type* copy_pu8_PinValue)
{
     68e:	fa 01       	movw	r30, r20
	if(copy_u8_PinId > PIN_LIMIT){
     690:	68 30       	cpi	r22, 0x08	; 8
     692:	a0 f5       	brcc	.+104    	; 0x6fc <DIO_ES_tGetPinValue+0x6e>
		return ES_NOT_OK;
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     694:	88 23       	and	r24, r24
     696:	59 f4       	brne	.+22     	; 0x6ae <DIO_ES_tGetPinValue+0x20>
		*copy_pu8_PinValue = GET_BIT(PINA,copy_u8_PinId);
     698:	89 b3       	in	r24, 0x19	; 25
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_ES_tGetPinValue+0x14>
     69e:	95 95       	asr	r25
     6a0:	87 95       	ror	r24
     6a2:	6a 95       	dec	r22
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_ES_tGetPinValue+0x10>
     6a6:	81 70       	andi	r24, 0x01	; 1
     6a8:	80 83       	st	Z, r24
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	59 f4       	brne	.+22     	; 0x6c8 <DIO_ES_tGetPinValue+0x3a>
		*copy_pu8_PinValue = GET_BIT(PINB,copy_u8_PinId);
     6b2:	86 b3       	in	r24, 0x16	; 22
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_ES_tGetPinValue+0x2e>
     6b8:	95 95       	asr	r25
     6ba:	87 95       	ror	r24
     6bc:	6a 95       	dec	r22
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_ES_tGetPinValue+0x2a>
     6c0:	81 70       	andi	r24, 0x01	; 1
     6c2:	80 83       	st	Z, r24
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	59 f4       	brne	.+22     	; 0x6e2 <DIO_ES_tGetPinValue+0x54>
		*copy_pu8_PinValue = GET_BIT(PINC,copy_u8_PinId);
     6cc:	83 b3       	in	r24, 0x13	; 19
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_ES_tGetPinValue+0x48>
     6d2:	95 95       	asr	r25
     6d4:	87 95       	ror	r24
     6d6:	6a 95       	dec	r22
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_ES_tGetPinValue+0x44>
     6da:	81 70       	andi	r24, 0x01	; 1
     6dc:	80 83       	st	Z, r24
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	59 f4       	brne	.+22     	; 0x6fc <DIO_ES_tGetPinValue+0x6e>
		*copy_pu8_PinValue = GET_BIT(PIND,copy_u8_PinId);
     6e6:	80 b3       	in	r24, 0x10	; 16
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_ES_tGetPinValue+0x62>
     6ec:	95 95       	asr	r25
     6ee:	87 95       	ror	r24
     6f0:	6a 95       	dec	r22
     6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_ES_tGetPinValue+0x5e>
     6f4:	81 70       	andi	r24, 0x01	; 1
     6f6:	80 83       	st	Z, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	08 95       	ret
     6fc:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
     6fe:	08 95       	ret

00000700 <DIO_ES_tSetPortDirection>:
 */


ES_t DIO_ES_tSetPortDirection(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Dir_Type copy_u8_PortDirection)
{
	if((copy_u8_PortDirection != OUTPUT) && (copy_u8_PortDirection != OUTPUT)){
     700:	61 30       	cpi	r22, 0x01	; 1
     702:	c9 f4       	brne	.+50     	; 0x736 <DIO_ES_tSetPortDirection+0x36>
		return ES_NOT_OK;
	}
	switch(copy_u8_PortId){
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	59 f0       	breq	.+22     	; 0x71e <DIO_ES_tSetPortDirection+0x1e>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	28 f0       	brcs	.+10     	; 0x716 <DIO_ES_tSetPortDirection+0x16>
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	59 f0       	breq	.+22     	; 0x726 <DIO_ES_tSetPortDirection+0x26>
     710:	83 30       	cpi	r24, 0x03	; 3
     712:	89 f4       	brne	.+34     	; 0x736 <DIO_ES_tSetPortDirection+0x36>
     714:	0c c0       	rjmp	.+24     	; 0x72e <DIO_ES_tSetPortDirection+0x2e>
	case DIO_U8_PORT_A:
		if(copy_u8_PortDirection == OUTPUT)
			DDRA = 0xff;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	8a bb       	out	0x1a, r24	; 26
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	08 95       	ret
		else
			DDRA = 0x00;
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortDirection == OUTPUT)
			DDRB = 0xff;
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	87 bb       	out	0x17, r24	; 23
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	08 95       	ret
		else
			DDRB = 0x00;
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortDirection == OUTPUT)
			DDRC = 0xff;
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	84 bb       	out	0x14, r24	; 20
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
		else
			DDRC = 0x00;
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortDirection == OUTPUT)
			DDRD = 0xff;
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	81 bb       	out	0x11, r24	; 17
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	08 95       	ret
     736:	81 e0       	ldi	r24, 0x01	; 1
	default:
		return ES_NOT_OK;
		break;
	}
	return ES_OK;
}
     738:	08 95       	ret

0000073a <DIO_ES_tSetPortValue>:



ES_t DIO_ES_tSetPortValue(DIO_U8_Port_Type copy_u8_PortId, u8 copy_u8_PortValue)
{
	if((copy_u8_PortValue != HIGH) && (copy_u8_PortValue != LOW)){
     73a:	62 30       	cpi	r22, 0x02	; 2
     73c:	68 f5       	brcc	.+90     	; 0x798 <DIO_ES_tSetPortValue+0x5e>
		return ES_NOT_OK;
	}
	switch(copy_u8_PortId){
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	81 f0       	breq	.+32     	; 0x762 <DIO_ES_tSetPortValue+0x28>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	28 f0       	brcs	.+10     	; 0x750 <DIO_ES_tSetPortValue+0x16>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	a9 f0       	breq	.+42     	; 0x774 <DIO_ES_tSetPortValue+0x3a>
     74a:	83 30       	cpi	r24, 0x03	; 3
     74c:	29 f5       	brne	.+74     	; 0x798 <DIO_ES_tSetPortValue+0x5e>
     74e:	1b c0       	rjmp	.+54     	; 0x786 <DIO_ES_tSetPortValue+0x4c>
	case DIO_U8_PORT_A:
		if(copy_u8_PortValue == HIGH)
     750:	61 30       	cpi	r22, 0x01	; 1
     752:	21 f4       	brne	.+8      	; 0x75c <DIO_ES_tSetPortValue+0x22>
			PORTA = 0xff;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	8b bb       	out	0x1b, r24	; 27
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	08 95       	ret
		else
			PORTA = 0x00;
     75c:	1b ba       	out	0x1b, r1	; 27
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret
		break;
	case DIO_U8_PORT_B:
		if(copy_u8_PortValue == HIGH)
     762:	61 30       	cpi	r22, 0x01	; 1
     764:	21 f4       	brne	.+8      	; 0x76e <DIO_ES_tSetPortValue+0x34>
			PORTB = 0xff;
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	88 bb       	out	0x18, r24	; 24
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret
		else
			PORTB = 0x00;
     76e:	18 ba       	out	0x18, r1	; 24
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	08 95       	ret
		break;
	case DIO_U8_PORT_C:
		if(copy_u8_PortValue == HIGH)
     774:	61 30       	cpi	r22, 0x01	; 1
     776:	21 f4       	brne	.+8      	; 0x780 <DIO_ES_tSetPortValue+0x46>
			PORTC = 0xff;
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	85 bb       	out	0x15, r24	; 21
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret
		else
			PORTC = 0x00;
     780:	15 ba       	out	0x15, r1	; 21
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	08 95       	ret
		break;
	case DIO_U8_PORT_D:
		if(copy_u8_PortValue == HIGH)
     786:	61 30       	cpi	r22, 0x01	; 1
     788:	21 f4       	brne	.+8      	; 0x792 <DIO_ES_tSetPortValue+0x58>
			PORTD = 0xff;
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	82 bb       	out	0x12, r24	; 18
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	08 95       	ret
		else
			PORTD = 0x00;
     792:	12 ba       	out	0x12, r1	; 18
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	08 95       	ret
     798:	81 e0       	ldi	r24, 0x01	; 1
	default:
		return ES_NOT_OK;
		break;
	}
	return ES_OK;
}
     79a:	08 95       	ret

0000079c <DIO_ES_tTOGPin>:
 * DIO_ES_tTOGPin is used to Toggle a specific pin
 */

ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId)
{
	if(copy_u8_PinId > PIN_LIMIT){
     79c:	68 30       	cpi	r22, 0x08	; 8
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <DIO_ES_tTOGPin+0x6>
     7a0:	40 c0       	rjmp	.+128    	; 0x822 <DIO_ES_tTOGPin+0x86>
		return ES_NOT_OK;
	}
	if(copy_u8_PortId == DIO_U8_PORT_A){
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <DIO_ES_tTOGPin+0x26>
		TOG_BIT(PORTA,copy_u8_PinId);
     7a6:	eb e3       	ldi	r30, 0x3B	; 59
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	20 81       	ld	r18, Z
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ES_tTOGPin+0x1a>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ES_tTOGPin+0x16>
     7ba:	28 27       	eor	r18, r24
     7bc:	20 83       	st	Z, r18
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_B){
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	71 f4       	brne	.+28     	; 0x7e2 <DIO_ES_tTOGPin+0x46>
		TOG_BIT(PORTB,copy_u8_PinId);
     7c6:	e8 e3       	ldi	r30, 0x38	; 56
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	20 81       	ld	r18, Z
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_ES_tTOGPin+0x3a>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	6a 95       	dec	r22
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_ES_tTOGPin+0x36>
     7da:	28 27       	eor	r18, r24
     7dc:	20 83       	st	Z, r18
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_C){
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	71 f4       	brne	.+28     	; 0x802 <DIO_ES_tTOGPin+0x66>
		TOG_BIT(PORTC,copy_u8_PinId);
     7e6:	e5 e3       	ldi	r30, 0x35	; 53
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	20 81       	ld	r18, Z
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_ES_tTOGPin+0x5a>
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	6a 95       	dec	r22
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_ES_tTOGPin+0x56>
     7fa:	28 27       	eor	r18, r24
     7fc:	20 83       	st	Z, r18
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret
	}else if(copy_u8_PortId == DIO_U8_PORT_D){
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	71 f4       	brne	.+28     	; 0x822 <DIO_ES_tTOGPin+0x86>
		TOG_BIT(PORTD,copy_u8_PinId);
     806:	e2 e3       	ldi	r30, 0x32	; 50
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	20 81       	ld	r18, Z
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_ES_tTOGPin+0x7a>
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	6a 95       	dec	r22
     818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_ES_tTOGPin+0x76>
     81a:	28 27       	eor	r18, r24
     81c:	20 83       	st	Z, r18
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	08 95       	ret
     822:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
     824:	08 95       	ret

00000826 <DIO_ES_tInit>:




ES_t DIO_ES_tInit(void)
{
     826:	4f 92       	push	r4
     828:	5f 92       	push	r5
     82a:	6f 92       	push	r6
     82c:	7f 92       	push	r7
     82e:	8f 92       	push	r8
     830:	9f 92       	push	r9
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	e1 ec       	ldi	r30, 0xC1	; 193
     848:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
     84a:	0f 2e       	mov	r0, r31
     84c:	f1 e3       	ldi	r31, 0x31	; 49
     84e:	cf 2e       	mov	r12, r31
     850:	dd 24       	eor	r13, r13
     852:	f0 2d       	mov	r31, r0
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	50 e0       	ldi	r21, 0x00	; 0
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     858:	0f 2e       	mov	r0, r31
     85a:	fb e3       	ldi	r31, 0x3B	; 59
     85c:	4f 2e       	mov	r4, r31
     85e:	55 24       	eor	r5, r5
     860:	f0 2d       	mov	r31, r0
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
     862:	0f 2e       	mov	r0, r31
     864:	f2 e3       	ldi	r31, 0x32	; 50
     866:	6f 2e       	mov	r6, r31
     868:	77 24       	eor	r7, r7
     86a:	f0 2d       	mov	r31, r0
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
     86c:	0f 2e       	mov	r0, r31
     86e:	f4 e3       	ldi	r31, 0x34	; 52
     870:	ef 2e       	mov	r14, r31
     872:	ff 24       	eor	r15, r15
     874:	f0 2d       	mov	r31, r0
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
     876:	0f 2e       	mov	r0, r31
     878:	f5 e3       	ldi	r31, 0x35	; 53
     87a:	8f 2e       	mov	r8, r31
     87c:	99 24       	eor	r9, r9
     87e:	f0 2d       	mov	r31, r0
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
     880:	07 e3       	ldi	r16, 0x37	; 55
     882:	10 e0       	ldi	r17, 0x00	; 0
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
     884:	0f 2e       	mov	r0, r31
     886:	f8 e3       	ldi	r31, 0x38	; 56
     888:	af 2e       	mov	r10, r31
     88a:	bb 24       	eor	r11, r11
     88c:	f0 2d       	mov	r31, r0
	for(i=0 ; i<PIN_COUNT ; i++){
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
     88e:	aa e3       	ldi	r26, 0x3A	; 58
     890:	b0 e0       	ldi	r27, 0x00	; 0


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
     892:	69 e0       	ldi	r22, 0x09	; 9
     894:	71 e0       	ldi	r23, 0x01	; 1
		if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_A){
     896:	80 81       	ld	r24, Z
     898:	88 23       	and	r24, r24
     89a:	51 f5       	brne	.+84     	; 0x8f0 <__stack+0x91>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	59 f4       	brne	.+22     	; 0x8b8 <__stack+0x59>
				SET_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
     8a2:	2c 91       	ld	r18, X
     8a4:	ca 01       	movw	r24, r20
     8a6:	01 80       	ldd	r0, Z+1	; 0x01
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	28 2b       	or	r18, r24
     8b4:	2c 93       	st	X, r18
     8b6:	a3 c0       	rjmp	.+326    	; 0x9fe <__stack+0x19f>
			}else{
				CLR_BIT(DDRA,Dio_CfgPinsArray[i].Pin);
     8b8:	8c 91       	ld	r24, X
     8ba:	9a 01       	movw	r18, r20
     8bc:	01 80       	ldd	r0, Z+1	; 0x01
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
     8c0:	22 0f       	add	r18, r18
     8c2:	33 1f       	adc	r19, r19
     8c4:	0a 94       	dec	r0
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
     8c8:	92 2f       	mov	r25, r18
     8ca:	90 95       	com	r25
     8cc:	89 23       	and	r24, r25
     8ce:	8c 93       	st	X, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
     8d0:	83 81       	ldd	r24, Z+3	; 0x03
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	29 f4       	brne	.+10     	; 0x8e0 <__stack+0x81>
					SET_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     8d6:	e2 01       	movw	r28, r4
     8d8:	88 81       	ld	r24, Y
     8da:	82 2b       	or	r24, r18
     8dc:	88 83       	st	Y, r24
     8de:	8f c0       	rjmp	.+286    	; 0x9fe <__stack+0x19f>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
     8e0:	88 23       	and	r24, r24
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	8c c0       	rjmp	.+280    	; 0x9fe <__stack+0x19f>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     8e6:	e2 01       	movw	r28, r4
     8e8:	88 81       	ld	r24, Y
     8ea:	89 23       	and	r24, r25
     8ec:	88 83       	st	Y, r24
     8ee:	87 c0       	rjmp	.+270    	; 0x9fe <__stack+0x19f>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_B){
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	61 f5       	brne	.+88     	; 0x94c <__stack+0xed>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
     8f4:	82 81       	ldd	r24, Z+2	; 0x02
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	61 f4       	brne	.+24     	; 0x912 <__stack+0xb3>
				SET_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
     8fa:	e8 01       	movw	r28, r16
     8fc:	28 81       	ld	r18, Y
     8fe:	ca 01       	movw	r24, r20
     900:	01 80       	ldd	r0, Z+1	; 0x01
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	28 2b       	or	r18, r24
     90e:	28 83       	st	Y, r18
     910:	76 c0       	rjmp	.+236    	; 0x9fe <__stack+0x19f>
			}else{
				CLR_BIT(DDRB,Dio_CfgPinsArray[i].Pin);
     912:	e8 01       	movw	r28, r16
     914:	88 81       	ld	r24, Y
     916:	9a 01       	movw	r18, r20
     918:	01 80       	ldd	r0, Z+1	; 0x01
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	92 2f       	mov	r25, r18
     926:	90 95       	com	r25
     928:	89 23       	and	r24, r25
     92a:	88 83       	st	Y, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
     92c:	83 81       	ldd	r24, Z+3	; 0x03
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	29 f4       	brne	.+10     	; 0x93c <__stack+0xdd>
					SET_BIT(PORTB,Dio_CfgPinsArray[i].Pin);
     932:	e5 01       	movw	r28, r10
     934:	88 81       	ld	r24, Y
     936:	82 2b       	or	r24, r18
     938:	88 83       	st	Y, r24
     93a:	61 c0       	rjmp	.+194    	; 0x9fe <__stack+0x19f>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
     93c:	88 23       	and	r24, r24
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0xe3>
     940:	5e c0       	rjmp	.+188    	; 0x9fe <__stack+0x19f>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     942:	e2 01       	movw	r28, r4
     944:	88 81       	ld	r24, Y
     946:	89 23       	and	r24, r25
     948:	88 83       	st	Y, r24
     94a:	59 c0       	rjmp	.+178    	; 0x9fe <__stack+0x19f>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_C){
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	59 f5       	brne	.+86     	; 0x9a6 <__stack+0x147>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	61 f4       	brne	.+24     	; 0x96e <__stack+0x10f>
				SET_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
     956:	e7 01       	movw	r28, r14
     958:	28 81       	ld	r18, Y
     95a:	ca 01       	movw	r24, r20
     95c:	01 80       	ldd	r0, Z+1	; 0x01
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	0a 94       	dec	r0
     966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x101>
     968:	28 2b       	or	r18, r24
     96a:	28 83       	st	Y, r18
     96c:	48 c0       	rjmp	.+144    	; 0x9fe <__stack+0x19f>
			}else{
				CLR_BIT(DDRC,Dio_CfgPinsArray[i].Pin);
     96e:	e7 01       	movw	r28, r14
     970:	88 81       	ld	r24, Y
     972:	9a 01       	movw	r18, r20
     974:	01 80       	ldd	r0, Z+1	; 0x01
     976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x11d>
     978:	22 0f       	add	r18, r18
     97a:	33 1f       	adc	r19, r19
     97c:	0a 94       	dec	r0
     97e:	e2 f7       	brpl	.-8      	; 0x978 <__stack+0x119>
     980:	92 2f       	mov	r25, r18
     982:	90 95       	com	r25
     984:	89 23       	and	r24, r25
     986:	88 83       	st	Y, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
     988:	83 81       	ldd	r24, Z+3	; 0x03
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	29 f4       	brne	.+10     	; 0x998 <__stack+0x139>
					SET_BIT(PORTC,Dio_CfgPinsArray[i].Pin);
     98e:	e4 01       	movw	r28, r8
     990:	88 81       	ld	r24, Y
     992:	82 2b       	or	r24, r18
     994:	88 83       	st	Y, r24
     996:	33 c0       	rjmp	.+102    	; 0x9fe <__stack+0x19f>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
     998:	88 23       	and	r24, r24
     99a:	89 f5       	brne	.+98     	; 0x9fe <__stack+0x19f>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     99c:	e2 01       	movw	r28, r4
     99e:	88 81       	ld	r24, Y
     9a0:	89 23       	and	r24, r25
     9a2:	88 83       	st	Y, r24
     9a4:	2c c0       	rjmp	.+88     	; 0x9fe <__stack+0x19f>
				}
			}
		}else if(Dio_CfgPinsArray[i].PinPort == DIO_U8_PORT_D){
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	51 f5       	brne	.+84     	; 0x9fe <__stack+0x19f>
			if(Dio_CfgPinsArray[i].dir == OUTPUT){
     9aa:	82 81       	ldd	r24, Z+2	; 0x02
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	61 f4       	brne	.+24     	; 0x9c8 <__stack+0x169>
				SET_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
     9b0:	e6 01       	movw	r28, r12
     9b2:	28 81       	ld	r18, Y
     9b4:	ca 01       	movw	r24, r20
     9b6:	01 80       	ldd	r0, Z+1	; 0x01
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <__stack+0x15f>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	0a 94       	dec	r0
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <__stack+0x15b>
     9c2:	28 2b       	or	r18, r24
     9c4:	28 83       	st	Y, r18
     9c6:	1b c0       	rjmp	.+54     	; 0x9fe <__stack+0x19f>
			}else{
				CLR_BIT(DDRD,Dio_CfgPinsArray[i].Pin);
     9c8:	e6 01       	movw	r28, r12
     9ca:	88 81       	ld	r24, Y
     9cc:	9a 01       	movw	r18, r20
     9ce:	01 80       	ldd	r0, Z+1	; 0x01
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0x177>
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	0a 94       	dec	r0
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <__stack+0x173>
     9da:	92 2f       	mov	r25, r18
     9dc:	90 95       	com	r25
     9de:	89 23       	and	r24, r25
     9e0:	88 83       	st	Y, r24
				if(Dio_CfgPinsArray[i].PullUp == PULLUP_ON){
     9e2:	83 81       	ldd	r24, Z+3	; 0x03
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	29 f4       	brne	.+10     	; 0x9f2 <__stack+0x193>
					SET_BIT(PORTD,Dio_CfgPinsArray[i].Pin);
     9e8:	e3 01       	movw	r28, r6
     9ea:	88 81       	ld	r24, Y
     9ec:	82 2b       	or	r24, r18
     9ee:	88 83       	st	Y, r24
     9f0:	06 c0       	rjmp	.+12     	; 0x9fe <__stack+0x19f>
				}else if(Dio_CfgPinsArray[i].PullUp == PULLUP_OFF){
     9f2:	88 23       	and	r24, r24
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__stack+0x19f>
					CLR_BIT(PORTA,Dio_CfgPinsArray[i].Pin);
     9f6:	e2 01       	movw	r28, r4
     9f8:	88 81       	ld	r24, Y
     9fa:	89 23       	and	r24, r25
     9fc:	88 83       	st	Y, r24
     9fe:	34 96       	adiw	r30, 0x04	; 4


ES_t DIO_ES_tInit(void)
{
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
     a00:	e6 17       	cp	r30, r22
     a02:	f7 07       	cpc	r31, r23
     a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x1a9>
     a06:	47 cf       	rjmp	.-370    	; 0x896 <__stack+0x37>
				}
			}
		}
	}
	return ES_OK;
}
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	08 95       	ret

00000a2c <LCD_ES_tTrigger_Enable>:
	return ES_OK;

}

static ES_t LCD_ES_tTrigger_Enable(void){  //We make it static cuz we won't use it anywhere but here
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, HIGH);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	62 e0       	ldi	r22, 0x02	; 2
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a36:	85 e3       	ldi	r24, 0x35	; 53
     a38:	8a 95       	dec	r24
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <LCD_ES_tTrigger_Enable+0xc>
	_delay_us(10);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, EN, LOW);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	9f e1       	ldi	r25, 0x1F	; 31
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <LCD_ES_tTrigger_Enable+0x1e>
	_delay_us(2000);
	return ES_OK;
}
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	08 95       	ret

00000a52 <Lcd_ES_tsendChar>:
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
	return ES_OK;
}
ES_t Lcd_ES_tsendChar(u8 data){
     a52:	1f 93       	push	r17
     a54:	18 2f       	mov	r17, r24
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
     a6a:	11 23       	and	r17, r17
     a6c:	34 f4       	brge	.+12     	; 0xa7a <Lcd_ES_tsendChar+0x28>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	66 e0       	ldi	r22, 0x06	; 6
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <Lcd_ES_tsendChar+0x32>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	66 e0       	ldi	r22, 0x06	; 6
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
     a84:	81 2f       	mov	r24, r17
     a86:	82 95       	swap	r24
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	83 70       	andi	r24, 0x03	; 3
     a8e:	80 ff       	sbrs	r24, 0
     a90:	06 c0       	rjmp	.+12     	; 0xa9e <Lcd_ES_tsendChar+0x4c>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <Lcd_ES_tsendChar+0x56>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
     aa8:	81 2f       	mov	r24, r17
     aaa:	82 95       	swap	r24
     aac:	86 95       	lsr	r24
     aae:	87 70       	andi	r24, 0x07	; 7
     ab0:	80 ff       	sbrs	r24, 0
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <Lcd_ES_tsendChar+0x6e>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	64 e0       	ldi	r22, 0x04	; 4
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     abe:	05 c0       	rjmp	.+10     	; 0xaca <Lcd_ES_tsendChar+0x78>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	64 e0       	ldi	r22, 0x04	; 4
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
     aca:	81 2f       	mov	r24, r17
     acc:	82 95       	swap	r24
     ace:	8f 70       	andi	r24, 0x0F	; 15
     ad0:	80 ff       	sbrs	r24, 0
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <Lcd_ES_tsendChar+0x8e>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	63 e0       	ldi	r22, 0x03	; 3
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     ade:	05 c0       	rjmp	.+10     	; 0xaea <Lcd_ES_tsendChar+0x98>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	63 e0       	ldi	r22, 0x03	; 3
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
     aea:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_ES_tTrigger_Enable>
	(GET_BIT(data,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
     aee:	81 2f       	mov	r24, r17
     af0:	86 95       	lsr	r24
     af2:	86 95       	lsr	r24
     af4:	86 95       	lsr	r24
     af6:	80 ff       	sbrs	r24, 0
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <Lcd_ES_tsendChar+0xb4>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	66 e0       	ldi	r22, 0x06	; 6
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <Lcd_ES_tsendChar+0xbe>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	66 e0       	ldi	r22, 0x06	; 6
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
     b10:	81 2f       	mov	r24, r17
     b12:	86 95       	lsr	r24
     b14:	86 95       	lsr	r24
     b16:	80 ff       	sbrs	r24, 0
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <Lcd_ES_tsendChar+0xd4>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	65 e0       	ldi	r22, 0x05	; 5
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <Lcd_ES_tsendChar+0xde>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	65 e0       	ldi	r22, 0x05	; 5
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
     b30:	81 2f       	mov	r24, r17
     b32:	86 95       	lsr	r24
     b34:	80 ff       	sbrs	r24, 0
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <Lcd_ES_tsendChar+0xf2>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <Lcd_ES_tsendChar+0xfc>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	64 e0       	ldi	r22, 0x04	; 4
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(data,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
     b4e:	10 ff       	sbrs	r17, 0
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <Lcd_ES_tsendChar+0x10c>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <Lcd_ES_tsendChar+0x116>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	63 e0       	ldi	r22, 0x03	; 3
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
     b68:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_ES_tTrigger_Enable>
	return ES_OK;
}
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	1f 91       	pop	r17
     b70:	08 95       	ret

00000b72 <Lcd_ES_tdisplayNum>:
	return ES_OK;
}

//A function to display Numbers instead of characters
ES_t Lcd_ES_tdisplayNum(u16 num)
{
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	2a 97       	sbiw	r28, 0x0a	; 10
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	8c 01       	movw	r16, r24
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>

	uint8_t ch[10],i=0,j=0;
	if(num == 0)
     ba4:	01 15       	cp	r16, r1
     ba6:	11 05       	cpc	r17, r1
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <Lcd_ES_tdisplayNum+0x40>
	{
		Lcd_ES_tsendChar('0');
     baa:	80 e3       	ldi	r24, 0x30	; 48
     bac:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_ES_tsendChar>
     bb0:	26 c0       	rjmp	.+76     	; 0xbfe <Lcd_ES_tdisplayNum+0x8c>
     bb2:	40 e0       	ldi	r20, 0x00	; 0
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
     bb4:	7e 01       	movw	r14, r28
     bb6:	08 94       	sec
     bb8:	e1 1c       	adc	r14, r1
     bba:	f1 1c       	adc	r15, r1
     bbc:	f7 01       	movw	r30, r14
     bbe:	e4 0f       	add	r30, r20
     bc0:	f1 1d       	adc	r31, r1
     bc2:	c8 01       	movw	r24, r16
     bc4:	6a e0       	ldi	r22, 0x0A	; 10
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodhi4>
     bcc:	80 5d       	subi	r24, 0xD0	; 208
     bce:	80 83       	st	Z, r24
			num /= 10;
     bd0:	c8 01       	movw	r24, r16
     bd2:	6a e0       	ldi	r22, 0x0A	; 10
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodhi4>
     bda:	86 2f       	mov	r24, r22
     bdc:	97 2f       	mov	r25, r23
     bde:	8c 01       	movw	r16, r24
			i++;
     be0:	4f 5f       	subi	r20, 0xFF	; 255
	{
		Lcd_ES_tsendChar('0');
	}
	else
	{
		while(num)
     be2:	01 15       	cp	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	51 f7       	brne	.-44     	; 0xbbc <Lcd_ES_tdisplayNum+0x4a>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
     be8:	44 23       	and	r20, r20
     bea:	49 f0       	breq	.+18     	; 0xbfe <Lcd_ES_tdisplayNum+0x8c>
     bec:	14 2f       	mov	r17, r20
		{
			Lcd_ES_tsendChar(ch[j-1]);
     bee:	fe 01       	movw	r30, r28
     bf0:	e1 0f       	add	r30, r17
     bf2:	f1 1d       	adc	r31, r1
     bf4:	80 81       	ld	r24, Z
     bf6:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_ES_tsendChar>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
     bfa:	11 50       	subi	r17, 0x01	; 1
     bfc:	c1 f7       	brne	.-16     	; 0xbee <Lcd_ES_tdisplayNum+0x7c>
		{
			Lcd_ES_tsendChar(ch[j-1]);
		}
	}
	return ES_OK;
}
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	2a 96       	adiw	r28, 0x0a	; 10
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <Lcd_ES_tsendString>:
	LCD_ES_tTrigger_Enable();
	return ES_OK;
}

ES_t Lcd_ES_tsendString(char *data)
{
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	41 e0       	ldi	r20, 0x01	; 1
     c28:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>

	unsigned char i=0;
	while(data[i]!=0)
     c36:	88 81       	ld	r24, Y
     c38:	88 23       	and	r24, r24
     c3a:	51 f0       	breq	.+20     	; 0xc50 <Lcd_ES_tsendString+0x36>
     c3c:	10 e0       	ldi	r17, 0x00	; 0
	{
		Lcd_ES_tsendChar(data[i]);
     c3e:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_ES_tsendChar>
		i++;
     c42:	1f 5f       	subi	r17, 0xFF	; 255
{
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);

	unsigned char i=0;
	while(data[i]!=0)
     c44:	fe 01       	movw	r30, r28
     c46:	e1 0f       	add	r30, r17
     c48:	f1 1d       	adc	r31, r1
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	b9 f7       	brne	.-18     	; 0xc3e <Lcd_ES_tsendString+0x24>
	{
		Lcd_ES_tsendChar(data[i]);
		i++;
	}
	return ES_OK;
}
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <Lcd_ES_tsendCmd>:
	Lcd_ES_tsendCmd(CLR_Display);
	_delay_ms(2);
	return ES_OK;
}

ES_t Lcd_ES_tsendCmd(u8 cmd){
     c5a:	1f 93       	push	r17
     c5c:	18 2f       	mov	r17, r24
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, LOW);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	// DIO_ES_tGetPinValue, DIO_ES_tSetPinValue
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
	(GET_BIT(cmd,7)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
     c72:	11 23       	and	r17, r17
     c74:	34 f4       	brge	.+12     	; 0xc82 <Lcd_ES_tsendCmd+0x28>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	66 e0       	ldi	r22, 0x06	; 6
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <Lcd_ES_tsendCmd+0x32>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	66 e0       	ldi	r22, 0x06	; 6
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,6)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
     c8c:	81 2f       	mov	r24, r17
     c8e:	82 95       	swap	r24
     c90:	86 95       	lsr	r24
     c92:	86 95       	lsr	r24
     c94:	83 70       	andi	r24, 0x03	; 3
     c96:	80 ff       	sbrs	r24, 0
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <Lcd_ES_tsendCmd+0x4c>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <Lcd_ES_tsendCmd+0x56>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,5)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
     cb0:	81 2f       	mov	r24, r17
     cb2:	82 95       	swap	r24
     cb4:	86 95       	lsr	r24
     cb6:	87 70       	andi	r24, 0x07	; 7
     cb8:	80 ff       	sbrs	r24, 0
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <Lcd_ES_tsendCmd+0x6e>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	64 e0       	ldi	r22, 0x04	; 4
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <Lcd_ES_tsendCmd+0x78>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,4)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
     cd2:	81 2f       	mov	r24, r17
     cd4:	82 95       	swap	r24
     cd6:	8f 70       	andi	r24, 0x0F	; 15
     cd8:	80 ff       	sbrs	r24, 0
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <Lcd_ES_tsendCmd+0x8e>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <Lcd_ES_tsendCmd+0x98>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
     cf2:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_ES_tTrigger_Enable>
	(GET_BIT(cmd,3)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D7,LOW);
     cf6:	81 2f       	mov	r24, r17
     cf8:	86 95       	lsr	r24
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	80 ff       	sbrs	r24, 0
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <Lcd_ES_tsendCmd+0xb4>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	66 e0       	ldi	r22, 0x06	; 6
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <Lcd_ES_tsendCmd+0xbe>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	66 e0       	ldi	r22, 0x06	; 6
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,2)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D6,LOW);
     d18:	81 2f       	mov	r24, r17
     d1a:	86 95       	lsr	r24
     d1c:	86 95       	lsr	r24
     d1e:	80 ff       	sbrs	r24, 0
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <Lcd_ES_tsendCmd+0xd4>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	65 e0       	ldi	r22, 0x05	; 5
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <Lcd_ES_tsendCmd+0xde>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	65 e0       	ldi	r22, 0x05	; 5
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,1)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D5,LOW);
     d38:	81 2f       	mov	r24, r17
     d3a:	86 95       	lsr	r24
     d3c:	80 ff       	sbrs	r24, 0
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <Lcd_ES_tsendCmd+0xf2>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	64 e0       	ldi	r22, 0x04	; 4
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <Lcd_ES_tsendCmd+0xfc>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	64 e0       	ldi	r22, 0x04	; 4
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	(GET_BIT(cmd,0)) ? DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,HIGH) : DIO_ES_tSetPinValue(LCD_DATA_PORT, D4,LOW);
     d56:	10 ff       	sbrs	r17, 0
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <Lcd_ES_tsendCmd+0x10c>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	63 e0       	ldi	r22, 0x03	; 3
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <Lcd_ES_tsendCmd+0x116>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	63 e0       	ldi	r22, 0x03	; 3
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	//Trigger Enable
	LCD_ES_tTrigger_Enable();
     d70:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_ES_tTrigger_Enable>
	return ES_OK;
}
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	1f 91       	pop	r17
     d78:	08 95       	ret

00000d7a <LCD_ES_tGoTo>:
	return ES_OK;
}

/************************************************************************/
ES_t LCD_ES_tGoTo(u8 Line, u8 x){
	if(0 == Line)
     d7a:	88 23       	and	r24, r24
     d7c:	41 f4       	brne	.+16     	; 0xd8e <LCD_ES_tGoTo+0x14>
	{
		if ( x <=15)
     d7e:	60 31       	cpi	r22, 0x10	; 16
     d80:	90 f4       	brcc	.+36     	; 0xda6 <LCD_ES_tGoTo+0x2c>
		{
			Lcd_ES_tsendCmd(0x80 + x);
     d82:	86 2f       	mov	r24, r22
     d84:	80 58       	subi	r24, 0x80	; 128
     d86:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	08 95       	ret
		}
	}
	else if (1 == Line)
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	11 f0       	breq	.+4      	; 0xd96 <LCD_ES_tGoTo+0x1c>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret
	{
		if ( x <=15)
     d96:	60 31       	cpi	r22, 0x10	; 16
     d98:	30 f4       	brcc	.+12     	; 0xda6 <LCD_ES_tGoTo+0x2c>
		{
			Lcd_ES_tsendCmd(0xC0 + x);
     d9a:	86 2f       	mov	r24, r22
     d9c:	80 54       	subi	r24, 0x40	; 64
     d9e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret
     da6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
     da8:	08 95       	ret

00000daa <lcd_ES_tclear>:
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

ES_t lcd_ES_tclear()
{
	Lcd_ES_tsendCmd(CLR_Display);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     db0:	80 e4       	ldi	r24, 0x40	; 64
     db2:	9f e1       	ldi	r25, 0x1F	; 31
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <lcd_ES_tclear+0xa>
	_delay_ms(2);
	return ES_OK;
}
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	08 95       	ret

00000dbc <Lcd_ES_tInit>:


// ES_t DIO_ES_tTOGPin(DIO_U8_Port_Type copy_u8_PortId, DIO_U8_Pin_Type copy_u8_PinId);

ES_t Lcd_ES_tInit(){
	Lcd_ES_tsendCmd(fourbit_mode);  /* Go into 4-bit operating mode*/
     dbc:	83 e3       	ldi	r24, 0x33	; 51
     dbe:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(fourbit_mode11);	/* Go into 4-bit operating mode*/
     dc2:	82 e3       	ldi	r24, 0x32	; 50
     dc4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
     dc8:	88 e2       	ldi	r24, 0x28	; 40
     dca:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CursorOFF);  /* Display on cursor off */
     dce:	8c e0       	ldi	r24, 0x0C	; 12
     dd0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	Lcd_ES_tsendCmd(CLR_Display);  /* Clear display screen */
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	return ES_OK;
}
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret

00000de4 <Lcd_ES_tsendChar_xy>:
	Lcd_ES_tdisplayNum(num);
	return ES_OK;

}

ES_t Lcd_ES_tsendChar_xy(u8 data,u8 row,u8 col){
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	f8 2e       	mov	r15, r24
     df0:	16 2f       	mov	r17, r22
     df2:	04 2f       	mov	r16, r20
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	41 e0       	ldi	r20, 0x01	; 1
     dfa:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>


	if(row == 1){
     e08:	11 30       	cpi	r17, 0x01	; 1
     e0a:	61 f4       	brne	.+24     	; 0xe24 <Lcd_ES_tsendChar_xy+0x40>
		Lcd_ES_tsendCmd(Force1stline);
     e0c:	80 e8       	ldi	r24, 0x80	; 128
     e0e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     e12:	80 ea       	ldi	r24, 0xA0	; 160
     e14:	9f e0       	ldi	r25, 0x0F	; 15
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <Lcd_ES_tsendChar_xy+0x32>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	10 16       	cp	r1, r16
     e1e:	11 06       	cpc	r1, r17
     e20:	6c f0       	brlt	.+26     	; 0xe3c <Lcd_ES_tsendChar_xy+0x58>
     e22:	15 c0       	rjmp	.+42     	; 0xe4e <Lcd_ES_tsendChar_xy+0x6a>


	if(row == 1){
		Lcd_ES_tsendCmd(Force1stline);
		_delay_ms(1);
	}else if(row == 2){
     e24:	12 30       	cpi	r17, 0x02	; 2
     e26:	11 f0       	breq	.+4      	; 0xe2c <Lcd_ES_tsendChar_xy+0x48>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	15 c0       	rjmp	.+42     	; 0xe56 <Lcd_ES_tsendChar_xy+0x72>
		Lcd_ES_tsendCmd(Force2ndline);
     e2c:	80 ec       	ldi	r24, 0xC0	; 192
     e2e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	9c e9       	ldi	r25, 0x9C	; 156
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <Lcd_ES_tsendChar_xy+0x52>
     e3a:	ef cf       	rjmp	.-34     	; 0xe1a <Lcd_ES_tsendChar_xy+0x36>
     e3c:	c1 e0       	ldi	r28, 0x01	; 1
     e3e:	d0 e0       	ldi	r29, 0x00	; 0
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
		Lcd_ES_tsendCmd(ShiftRight);
     e40:	8c e1       	ldi	r24, 0x1C	; 28
     e42:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
		_delay_ms(10);
	}else{
		return ES_NOT_OK;
	}

	for(int j=1;j<=col;j++){
     e46:	21 96       	adiw	r28, 0x01	; 1
     e48:	0c 17       	cp	r16, r28
     e4a:	1d 07       	cpc	r17, r29
     e4c:	cc f7       	brge	.-14     	; 0xe40 <Lcd_ES_tsendChar_xy+0x5c>
		Lcd_ES_tsendCmd(ShiftRight);
	}
	Lcd_ES_tsendChar(data);
     e4e:	8f 2d       	mov	r24, r15
     e50:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_ES_tsendChar>
     e54:	80 e0       	ldi	r24, 0x00	; 0
	return ES_OK;
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	08 95       	ret

00000e62 <Lcd_ES_tdisplayNum_xy>:
		}
	}
	return ES_OK;
}

ES_t Lcd_ES_tdisplayNum_xy(u16 num,u8 row,u8 col){
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	7c 01       	movw	r14, r24
     e70:	16 2f       	mov	r17, r22
     e72:	04 2f       	mov	r16, r20

	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>


	if(row == 1){
     e88:	11 30       	cpi	r17, 0x01	; 1
     e8a:	61 f4       	brne	.+24     	; 0xea4 <Lcd_ES_tdisplayNum_xy+0x42>
		Lcd_ES_tsendCmd(Force1stline);
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     e92:	80 ea       	ldi	r24, 0xA0	; 160
     e94:	9f e0       	ldi	r25, 0x0F	; 15
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <Lcd_ES_tdisplayNum_xy+0x34>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	10 16       	cp	r1, r16
     e9e:	11 06       	cpc	r1, r17
     ea0:	6c f0       	brlt	.+26     	; 0xebc <Lcd_ES_tdisplayNum_xy+0x5a>
     ea2:	15 c0       	rjmp	.+42     	; 0xece <Lcd_ES_tdisplayNum_xy+0x6c>


	if(row == 1){
		Lcd_ES_tsendCmd(Force1stline);
		_delay_ms(1);
	}else if(row == 2){
     ea4:	12 30       	cpi	r17, 0x02	; 2
     ea6:	11 f0       	breq	.+4      	; 0xeac <Lcd_ES_tdisplayNum_xy+0x4a>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	15 c0       	rjmp	.+42     	; 0xed6 <Lcd_ES_tdisplayNum_xy+0x74>
		Lcd_ES_tsendCmd(Force2ndline);
     eac:	80 ec       	ldi	r24, 0xC0	; 192
     eae:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	9c e9       	ldi	r25, 0x9C	; 156
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <Lcd_ES_tdisplayNum_xy+0x54>
     eba:	ef cf       	rjmp	.-34     	; 0xe9a <Lcd_ES_tdisplayNum_xy+0x38>
     ebc:	c1 e0       	ldi	r28, 0x01	; 1
     ebe:	d0 e0       	ldi	r29, 0x00	; 0
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
		Lcd_ES_tsendCmd(ShiftRight);
     ec0:	8c e1       	ldi	r24, 0x1C	; 28
     ec2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
	}else{
		return ES_NOT_OK;
	}


	for(int j=1;j<=col;j++){
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	0c 17       	cp	r16, r28
     eca:	1d 07       	cpc	r17, r29
     ecc:	cc f7       	brge	.-14     	; 0xec0 <Lcd_ES_tdisplayNum_xy+0x5e>
		Lcd_ES_tsendCmd(ShiftRight);
	}

	Lcd_ES_tdisplayNum(num);
     ece:	c7 01       	movw	r24, r14
     ed0:	0e 94 b9 05 	call	0xb72	; 0xb72 <Lcd_ES_tdisplayNum>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
	return ES_OK;

}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <Lcd_ES_tsendString_xy>:
		i++;
	}
	return ES_OK;
}

ES_t Lcd_ES_tsendString_xy(char *data,u8 row,u8 col){
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	ec 01       	movw	r28, r24
     eee:	06 2f       	mov	r16, r22
     ef0:	14 2f       	mov	r17, r20
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RS, HIGH);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	DIO_ES_tSetPinValue(LCD_CMD_PORT, RW, LOW);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
	Lcd_ES_tsendChar(data);
	return ES_OK;
}

static ES_t LCD_ES_tSet_Cursor_Pos(u8 row,u8 column){
	column--;
     f06:	11 50       	subi	r17, 0x01	; 1
	switch(row){
     f08:	01 30       	cpi	r16, 0x01	; 1
     f0a:	19 f0       	breq	.+6      	; 0xf12 <Lcd_ES_tsendString_xy+0x2e>
     f0c:	02 30       	cpi	r16, 0x02	; 2
     f0e:	51 f4       	brne	.+20     	; 0xf24 <Lcd_ES_tsendString_xy+0x40>
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <Lcd_ES_tsendString_xy+0x38>
	         case 1:
	        	 Lcd_ES_tsendCmd((0x80 + column));
     f12:	81 2f       	mov	r24, r17
     f14:	80 58       	subi	r24, 0x80	; 128
     f16:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <Lcd_ES_tsendString_xy+0x40>
	        	 break;
	         case 2:
	        	 Lcd_ES_tsendCmd((0xc0 + column));
     f1c:	81 2f       	mov	r24, r17
     f1e:	80 54       	subi	r24, 0x40	; 64
     f20:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Lcd_ES_tsendCmd>

		for(int j=1;j<=col;j++){
			Lcd_sendCmd(ShiftRight);
		}*/
	LCD_ES_tSet_Cursor_Pos(row,col);
	Lcd_ES_tsendString(data);
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
	return ES_OK;

}
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <KPD_ES_tGetKeyPressed>:
// To avoid the unarrangement and uncontiguous
const u8 KPD_Au8RowsPins[4] = {KPD_U8_R1,KPD_U8_R2,KPD_U8_R3,KPD_U8_R4};
const u8 KPD_Au8ColsPins[4] = {KPD_U8_C1,KPD_U8_C2,KPD_U8_C3,KPD_U8_C4};

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
     f36:	3f 92       	push	r3
     f38:	4f 92       	push	r4
     f3a:	5f 92       	push	r5
     f3c:	6f 92       	push	r6
     f3e:	7f 92       	push	r7
     f40:	8f 92       	push	r8
     f42:	9f 92       	push	r9
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	5c 01       	movw	r10, r24
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	f5 01       	movw	r30, r10
     f64:	80 83       	st	Z, r24
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
     f66:	a1 14       	cp	r10, r1
     f68:	b1 04       	cpc	r11, r1
     f6a:	11 f4       	brne	.+4      	; 0xf70 <KPD_ES_tGetKeyPressed+0x3a>
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	99 c0       	rjmp	.+306    	; 0x10a2 <KPD_ES_tGetKeyPressed+0x16c>
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
     f74:	0f 2e       	mov	r0, r31
     f76:	fe e1       	ldi	r31, 0x1E	; 30
     f78:	6f 2e       	mov	r6, r31
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	7f 2e       	mov	r7, r31
     f7e:	f0 2d       	mov	r31, r0
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
     f80:	55 24       	eor	r5, r5
     f82:	68 94       	set
     f84:	51 f8       	bld	r5, 1
     f86:	6e 01       	movw	r12, r28
     f88:	08 94       	sec
     f8a:	c1 1c       	adc	r12, r1
     f8c:	d1 1c       	adc	r13, r1
     f8e:	44 24       	eor	r4, r4
     f90:	68 94       	set
     f92:	42 f8       	bld	r4, 2
     f94:	0f 2e       	mov	r0, r31
     f96:	f5 e0       	ldi	r31, 0x05	; 5
     f98:	3f 2e       	mov	r3, r31
     f9a:	f0 2d       	mov	r31, r0

ES_t KPD_ES_tGetKeyPressed(u8 *copy_pu8ReturnedKey)
{
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
     f9c:	48 01       	movw	r8, r16
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
		{
			// Activate row
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
     f9e:	f3 01       	movw	r30, r6
     fa0:	e0 0f       	add	r30, r16
     fa2:	f1 1f       	adc	r31, r17
     fa4:	e0 80       	ld	r14, Z
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	6e 2d       	mov	r22, r14
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
     fb0:	f5 2c       	mov	r15, r5
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	65 2d       	mov	r22, r5
     fb6:	a6 01       	movw	r20, r12
     fb8:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	88 23       	and	r24, r24
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <KPD_ES_tGetKeyPressed+0x92>
     fc2:	cc 24       	eor	r12, r12
     fc4:	dd 24       	eor	r13, r13
     fc6:	2c c0       	rjmp	.+88     	; 0x1020 <KPD_ES_tGetKeyPressed+0xea>
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
     fc8:	0f 2e       	mov	r0, r31
     fca:	f3 e0       	ldi	r31, 0x03	; 3
     fcc:	ff 2e       	mov	r15, r31
     fce:	f0 2d       	mov	r31, r0
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	a6 01       	movw	r20, r12
     fd6:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	88 23       	and	r24, r24
     fde:	21 f4       	brne	.+8      	; 0xfe8 <KPD_ES_tGetKeyPressed+0xb2>
     fe0:	cc 24       	eor	r12, r12
     fe2:	dd 24       	eor	r13, r13
     fe4:	c3 94       	inc	r12
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <KPD_ES_tGetKeyPressed+0xea>
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
     fe8:	f4 2c       	mov	r15, r4
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	64 2d       	mov	r22, r4
     fee:	a6 01       	movw	r20, r12
     ff0:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 23       	and	r24, r24
     ff8:	29 f4       	brne	.+10     	; 0x1004 <KPD_ES_tGetKeyPressed+0xce>
     ffa:	cc 24       	eor	r12, r12
     ffc:	dd 24       	eor	r13, r13
     ffe:	68 94       	set
    1000:	c1 f8       	bld	r12, 1
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <KPD_ES_tGetKeyPressed+0xea>
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],LOW);
			// Check which input pin has zero "pressed"
			// by reading 4 pins input "columns"
			for(Local_u8ColsCounter=INIT;Local_u8ColsCounter<COLS_NUM;Local_u8ColsCounter++)
			{
				DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);
    1004:	f3 2c       	mov	r15, r3
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	63 2d       	mov	r22, r3
    100a:	a6 01       	movw	r20, r12
    100c:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
				if(Local_u8PinVal == LOW){ /* Switch is pressed */
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 23       	and	r24, r24
    1014:	d1 f5       	brne	.+116    	; 0x108a <KPD_ES_tGetKeyPressed+0x154>
    1016:	0f 2e       	mov	r0, r31
    1018:	f3 e0       	ldi	r31, 0x03	; 3
    101a:	cf 2e       	mov	r12, r31
    101c:	dd 24       	eor	r13, r13
    101e:	f0 2d       	mov	r31, r0
    1020:	28 ec       	ldi	r18, 0xC8	; 200
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e9       	ldi	r20, 0x90	; 144
    1026:	51 e0       	ldi	r21, 0x01	; 1
    1028:	ca 01       	movw	r24, r20
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <KPD_ES_tGetKeyPressed+0xf4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	d1 f7       	brne	.-12     	; 0x1028 <KPD_ES_tGetKeyPressed+0xf2>
					/* The switch which reaches between the activated
					 * Column and the pressed key */
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	6f 2d       	mov	r22, r15
    1038:	ae 01       	movw	r20, r28
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 23       	and	r24, r24
    1046:	59 f4       	brne	.+22     	; 0x105e <KPD_ES_tGetKeyPressed+0x128>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
    1048:	8e 01       	movw	r16, r28
    104a:	0f 5f       	subi	r16, 0xFF	; 255
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	6f 2d       	mov	r22, r15
    1052:	a8 01       	movw	r20, r16
    1054:	0e 94 47 03 	call	0x68e	; 0x68e <DIO_ES_tGetPinValue>
					_delay_ms(20);   // Debouncing
					// Check if the pin is still low "problem of multiple display"
					DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					// will not get out of the while until he raised his hand "Value = HIGH"
					// You want to let stuck the code here until the value equals high
					while(Local_u8PinVal == LOW){
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	88 23       	and	r24, r24
    105c:	c1 f3       	breq	.-16     	; 0x104e <KPD_ES_tGetKeyPressed+0x118>
						// Continues reading until the value equals high
						DIO_ES_tGetPinValue(KPD_U8_PORTCOLS,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinVal);  // Update the PinVal
					}
					*copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    105e:	f4 01       	movw	r30, r8
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ec 0d       	add	r30, r12
    106a:	fd 1d       	adc	r31, r13
    106c:	e2 5f       	subi	r30, 0xF2	; 242
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	80 81       	ld	r24, Z
    1072:	f5 01       	movw	r30, r10
    1074:	80 83       	st	Z, r24
					Local_u8Flag = HIGH;
					break;
				}
			}
			// Deactivate ROW
			DIO_ES_tSetPinValue(KPD_U8_PORTROWS,KPD_Au8RowsPins[Local_u8RowsCounter],HIGH);
    1076:	f4 01       	movw	r30, r8
    1078:	e2 5e       	subi	r30, 0xE2	; 226
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	60 81       	ld	r22, Z
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0c c0       	rjmp	.+24     	; 0x10a2 <KPD_ES_tGetKeyPressed+0x16c>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	6e 2d       	mov	r22, r14
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
    1094:	0f 5f       	subi	r16, 0xFF	; 255
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
	*copy_pu8ReturnedKey = KPD_U8_NOT_PRESSED;
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinVal,Local_u8Flag = LOW;
	if(copy_pu8ReturnedKey != NULL)
	{
		/* Activation of each row "for loop" */
		for(Local_u8RowsCounter=INIT;Local_u8RowsCounter<ROWS_NUM;Local_u8RowsCounter++)
    1098:	04 30       	cpi	r16, 0x04	; 4
    109a:	11 05       	cpc	r17, r1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <KPD_ES_tGetKeyPressed+0x16a>
    109e:	7e cf       	rjmp	.-260    	; 0xf9c <KPD_ES_tGetKeyPressed+0x66>
    10a0:	80 e0       	ldi	r24, 0x00	; 0

	}else{
		return ES_NOT_OK;
	}
	return ES_OK;
}
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	7f 90       	pop	r7
    10be:	6f 90       	pop	r6
    10c0:	5f 90       	pop	r5
    10c2:	4f 90       	pop	r4
    10c4:	3f 90       	pop	r3
    10c6:	08 95       	ret

000010c8 <LED_ON>:
#define RED_LED DIO_U8_PIN_0

// Indication of correct password
void LED_ON(void)
{
	DIO_ES_tSetPinValue(DIO_U8_PORT_C, RED_LED, HIGH);
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
//	_delay_ms(500);
//	DIO_ES_tSetPinValue(DIO_U8_PORT_C, RED_LED, LOW);
//	_delay_ms(500);
}
    10d2:	08 95       	ret

000010d4 <main>:
		countOverflows=0;
	}
}

int main()
{
    10d4:	2f 92       	push	r2
    10d6:	3f 92       	push	r3
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	sei();   // Enabling global interrupt
    10fe:	78 94       	sei
	DIO_ES_tInit();
    1100:	0e 94 13 04 	call	0x826	; 0x826 <DIO_ES_tInit>
	Lcd_ES_tInit();
    1104:	0e 94 de 06 	call	0xdbc	; 0xdbc <Lcd_ES_tInit>
	u8 Value;
	u8 count=0;


	// Interrupt pin INT2
	EXI_TriggerEdge(EX_INT2,FALLING_EDGE);
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	0e 94 2c 01 	call	0x258	; 0x258 <EXI_TriggerEdge>
	EXI_ENABLE(EX_INT2);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <EXI_ENABLE>
	EXI_Set_CallBack(EX_INT2,LED_ON);
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	64 e6       	ldi	r22, 0x64	; 100
    111a:	78 e0       	ldi	r23, 0x08	; 8
    111c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EXI_Set_CallBack>

	DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_2, HIGH);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	62 e0       	ldi	r22, 0x02	; 2
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>


	// Give the user the option to create a password
	// Looping every 20 seconds or something

	Lcd_ES_tsendString("Enter Password !");
    112a:	80 e6       	ldi	r24, 0x60	; 96
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
	LCD_ES_tGoTo(1, 5);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	0e 94 bd 06 	call	0xd7a	; 0xd7a <LCD_ES_tGoTo>
    113a:	bb 24       	eor	r11, r11

	while(1)
	{
		//while(flag==0){
			// KeyPad interfacing
			KPD_ES_tGetKeyPressed(&Value);
    113c:	7e 01       	movw	r14, r28
    113e:	08 94       	sec
    1140:	e1 1c       	adc	r14, r1
    1142:	f1 1c       	adc	r15, r1
			if(Value != KPD_U8_NOT_PRESSED){

				Lcd_ES_tsendChar('*');
				input[indexz] = Value; // Store input in array
    1144:	0f 2e       	mov	r0, r31
    1146:	f1 e3       	ldi	r31, 0x31	; 49
    1148:	cf 2e       	mov	r12, r31
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	df 2e       	mov	r13, r31
    114e:	f0 2d       	mov	r31, r0
				indexz++;
				if (indexz >= 4) { // Check if password entered
					if (strcmp(input, password) == 0) {
    1150:	0f 2e       	mov	r0, r31
    1152:	f9 e0       	ldi	r31, 0x09	; 9
    1154:	8f 2e       	mov	r8, r31
    1156:	f1 e0       	ldi	r31, 0x01	; 1
    1158:	9f 2e       	mov	r9, r31
    115a:	f0 2d       	mov	r31, r0

					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
						Lcd_ES_tsendString("Wrong Password");
    115c:	0f 2e       	mov	r0, r31
    115e:	ff e7       	ldi	r31, 0x7F	; 127
    1160:	6f 2e       	mov	r6, r31
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	7f 2e       	mov	r7, r31
    1166:	f0 2d       	mov	r31, r0
						memset(input, '\0', sizeof(input));
    1168:	0f 2e       	mov	r0, r31
    116a:	f5 e0       	ldi	r31, 0x05	; 5
    116c:	af 2e       	mov	r10, r31
    116e:	f0 2d       	mov	r31, r0
						indexz = 0;
    1170:	0f 2e       	mov	r0, r31
    1172:	f8 e9       	ldi	r31, 0x98	; 152
    1174:	4f 2e       	mov	r4, r31
    1176:	fa e3       	ldi	r31, 0x3A	; 58
    1178:	5f 2e       	mov	r5, r31
    117a:	f0 2d       	mov	r31, r0
    117c:	00 e9       	ldi	r16, 0x90	; 144
    117e:	11 e0       	ldi	r17, 0x01	; 1
//						_delay_ms(1500);
//						_delay_ms(1500);
						flag=0;
						count++;
						lcd_ES_tclear();
						Lcd_ES_tsendString("Try again");
    1180:	0f 2e       	mov	r0, r31
    1182:	fe e8       	ldi	r31, 0x8E	; 142
    1184:	2f 2e       	mov	r2, r31
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	3f 2e       	mov	r3, r31
    118a:	f0 2d       	mov	r31, r0

	while(1)
	{
		//while(flag==0){
			// KeyPad interfacing
			KPD_ES_tGetKeyPressed(&Value);
    118c:	c7 01       	movw	r24, r14
    118e:	0e 94 9b 07 	call	0xf36	; 0xf36 <KPD_ES_tGetKeyPressed>
			if(Value != KPD_U8_NOT_PRESSED){
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	d1 f3       	breq	.-12     	; 0x118c <main+0xb8>

				Lcd_ES_tsendChar('*');
    1198:	8a e2       	ldi	r24, 0x2A	; 42
    119a:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd_ES_tsendChar>
				input[indexz] = Value; // Store input in array
    119e:	80 91 36 01 	lds	r24, 0x0136
    11a2:	f6 01       	movw	r30, r12
    11a4:	e8 0f       	add	r30, r24
    11a6:	f1 1d       	adc	r31, r1
    11a8:	99 81       	ldd	r25, Y+1	; 0x01
    11aa:	90 83       	st	Z, r25
				indexz++;
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 36 01 	sts	0x0136, r24
				if (indexz >= 4) { // Check if password entered
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	58 f3       	brcs	.-42     	; 0x118c <main+0xb8>
					if (strcmp(input, password) == 0) {
    11b6:	c6 01       	movw	r24, r12
    11b8:	b4 01       	movw	r22, r8
    11ba:	0e 94 82 09 	call	0x1304	; 0x1304 <strcmp>
    11be:	28 2f       	mov	r18, r24
    11c0:	39 2f       	mov	r19, r25
    11c2:	23 2b       	or	r18, r19
    11c4:	e9 f4       	brne	.+58     	; 0x1200 <main+0x12c>
						// Password is correct, perform action
						//						DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_2, HIGH);
						lcd_ES_tclear();
    11c6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
						Lcd_ES_tsendString("Garage opened");
    11ca:	81 e7       	ldi	r24, 0x71	; 113
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>

						DIO_ES_tSetPinValue(DIO_U8_PORT_C, MOTOR_PIN, HIGH);
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	64 e0       	ldi	r22, 0x04	; 4
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>


						Timer0_Init(TIMER0_NORMAL_MODE, TIMER0_PRESCALAR_1024,OC0_DISCONNECTED);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	6a 2d       	mov	r22, r10
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <Timer0_Init>
						Timer0_OVInterrupt_Enable();
    11e6:	0e 94 aa 00 	call	0x154	; 0x154 <Timer0_OVInterrupt_Enable>

						TCNT0 = 256-36;
    11ea:	8c ed       	ldi	r24, 0xDC	; 220
    11ec:	e2 e5       	ldi	r30, 0x52	; 82
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 83       	st	Z, r24
						Timer0_OVF_SetCallBack(delay);
    11f2:	80 e3       	ldi	r24, 0x30	; 48
    11f4:	99 e0       	ldi	r25, 0x09	; 9
    11f6:	0e 94 b6 00 	call	0x16c	; 0x16c <Timer0_OVF_SetCallBack>
						flag=0;
    11fa:	10 92 30 01 	sts	0x0130, r1
    11fe:	c6 cf       	rjmp	.-116    	; 0x118c <main+0xb8>
//						break;

					}
					else {
						// Password is incorrect, reset input
						lcd_ES_tclear();
    1200:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
						Lcd_ES_tsendString("Wrong Password");
    1204:	c3 01       	movw	r24, r6
    1206:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
						memset(input, '\0', sizeof(input));
    120a:	f6 01       	movw	r30, r12
    120c:	8a 2d       	mov	r24, r10
    120e:	11 92       	st	Z+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <main+0x13a>
						indexz = 0;
    1214:	10 92 36 01 	sts	0x0136, r1
    1218:	92 01       	movw	r18, r4
    121a:	c8 01       	movw	r24, r16
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <main+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	d1 f7       	brne	.-12     	; 0x121a <main+0x146>
						_delay_ms(1500);
//						_delay_ms(1500);
//						_delay_ms(1500);
						flag=0;
    1226:	10 92 30 01 	sts	0x0130, r1
						count++;
    122a:	b3 94       	inc	r11
						lcd_ES_tclear();
    122c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
						Lcd_ES_tsendString("Try again");
    1230:	c1 01       	movw	r24, r2
    1232:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
						LCD_ES_tGoTo(1, 5);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	6a 2d       	mov	r22, r10
    123a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <LCD_ES_tGoTo>
						if(count == 3){
    123e:	e3 e0       	ldi	r30, 0x03	; 3
    1240:	be 16       	cp	r11, r30
    1242:	09 f0       	breq	.+2      	; 0x1246 <main+0x172>
    1244:	a3 cf       	rjmp	.-186    	; 0x118c <main+0xb8>
							lcd_ES_tclear();
    1246:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
							Lcd_ES_tsendString("Blocked !!!");
    124a:	88 e9       	ldi	r24, 0x98	; 152
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
							count=0;
							DIO_ES_tSetPinValue(DIO_U8_PORT_B, DIO_U8_PIN_2, LOW);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
    125c:	bb 24       	eor	r11, r11
    125e:	96 cf       	rjmp	.-212    	; 0x118c <main+0xb8>

00001260 <delay>:
	// delay / tick_time = num_counts
	// no. of counts / 256 = num_overflows
	// no. of counts mod 256 = no. of rest counts
	// TCNT value to reach the no. of rest counts
	// TCNT0 = 256 - no. of rest counts
	countOverflows++;
    1260:	80 91 2e 01 	lds	r24, 0x012E
    1264:	90 91 2f 01 	lds	r25, 0x012F
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	90 93 2f 01 	sts	0x012F, r25
    126e:	80 93 2e 01 	sts	0x012E, r24
	// 8 As first interrupt will occur at 208, then 7 interrupts
	if(countOverflows == 245)
    1272:	80 91 2e 01 	lds	r24, 0x012E
    1276:	90 91 2f 01 	lds	r25, 0x012F
    127a:	85 3f       	cpi	r24, 0xF5	; 245
    127c:	91 05       	cpc	r25, r1
    127e:	69 f5       	brne	.+90     	; 0x12da <delay+0x7a>
	{
		DIO_ES_tSetPinValue(DIO_U8_PORT_C, MOTOR_PIN, LOW);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_ES_tSetPinValue>
		lcd_ES_tclear();
    128a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
		Lcd_ES_tsendString("Garage Closed");
    128e:	84 ea       	ldi	r24, 0xA4	; 164
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
    1296:	28 e9       	ldi	r18, 0x98	; 152
    1298:	3a e3       	ldi	r19, 0x3A	; 58
    129a:	40 e9       	ldi	r20, 0x90	; 144
    129c:	51 e0       	ldi	r21, 0x01	; 1
    129e:	ca 01       	movw	r24, r20
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <delay+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	d1 f7       	brne	.-12     	; 0x129e <delay+0x3e>
		_delay_ms(1500);
		lcd_ES_tclear();
    12aa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_ES_tclear>
		Lcd_ES_tsendString("Enter Password");
    12ae:	82 eb       	ldi	r24, 0xB2	; 178
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Lcd_ES_tsendString>
		LCD_ES_tGoTo(1, 5);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	65 e0       	ldi	r22, 0x05	; 5
    12ba:	0e 94 bd 06 	call	0xd7a	; 0xd7a <LCD_ES_tGoTo>
		memset(input, '\0', sizeof(input));
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	df 01       	movw	r26, r30
    12c6:	1d 92       	st	X+, r1
    12c8:	8a 95       	dec	r24
    12ca:	e9 f7       	brne	.-6      	; 0x12c6 <delay+0x66>
		indexz=0;
    12cc:	10 92 36 01 	sts	0x0136, r1
		TCCR0 = 0x00;
    12d0:	13 be       	out	0x33, r1	; 51
		//TCNT0 = 256-36;
		countOverflows=0;
    12d2:	10 92 2f 01 	sts	0x012F, r1
    12d6:	10 92 2e 01 	sts	0x012E, r1
    12da:	08 95       	ret

000012dc <__udivmodhi4>:
    12dc:	aa 1b       	sub	r26, r26
    12de:	bb 1b       	sub	r27, r27
    12e0:	51 e1       	ldi	r21, 0x11	; 17
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <__udivmodhi4_ep>

000012e4 <__udivmodhi4_loop>:
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	a6 17       	cp	r26, r22
    12ea:	b7 07       	cpc	r27, r23
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <__udivmodhi4_ep>
    12ee:	a6 1b       	sub	r26, r22
    12f0:	b7 0b       	sbc	r27, r23

000012f2 <__udivmodhi4_ep>:
    12f2:	88 1f       	adc	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	5a 95       	dec	r21
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <__udivmodhi4_loop>
    12fa:	80 95       	com	r24
    12fc:	90 95       	com	r25
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	08 95       	ret

00001304 <strcmp>:
    1304:	fb 01       	movw	r30, r22
    1306:	dc 01       	movw	r26, r24
    1308:	8d 91       	ld	r24, X+
    130a:	01 90       	ld	r0, Z+
    130c:	80 19       	sub	r24, r0
    130e:	01 10       	cpse	r0, r1
    1310:	d9 f3       	breq	.-10     	; 0x1308 <strcmp+0x4>
    1312:	99 0b       	sbc	r25, r25
    1314:	08 95       	ret

00001316 <_exit>:
    1316:	f8 94       	cli

00001318 <__stop_program>:
    1318:	ff cf       	rjmp	.-2      	; 0x1318 <__stop_program>
